<div
  class="product-recommendations"
  data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related"
>
{%- if recommendations.performed? and recommendations.products_count > 0 -%}
  <div class="c-related-products js-related-products">
    <div class="u-container">
      <div class="u-content">
        <h2 class="c-related-products__title">related products</h2>
        <div class="c-related-products__slider swiper">
          <div class="swiper-wrapper">

            {% for recommendation in recommendations.products %}
              <div class="swiper-slide">
                <div class="c-product-card">
                  <div class="c-product-card__media">
                    <img src="{{ recommendation.featured_image | image_url: width: 360 }}" alt="Capita Related Product {{ recommendation.title | strip_html }}"/>
                  </div>
                  <div class="c-product-card__info">
                    <span class="c-product-card__name">{{ recommendation.title }}</span>
                    <span class="c-product-card__price">{{ recommendation.price | money_with_currency }}</span>
                  </div>
                </div>
              </div>
            {%- endfor -%}

          </div>
          <div class="c-related-products__scrollbar swiper-scrollbar"></div>
        </div>
      </div>
    </div>
  </div>
{%- endif -%}
</div>




  {% javascript %}
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;

    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
{% endjavascript %}